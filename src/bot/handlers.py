import logging
from telegram import Update
from telegram.ext import ContextTypes
import sys
import os
import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from src.services.supabase_service import SupabaseService
from src.services.openai_service import OpenAIService
from src.services.docs_service import DocsService
from src.services.channel_logger import ChannelLogger
from src.services.sheets_service import SheetsService

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
supabase_service = SupabaseService()
openai_service = OpenAIService()
docs_service = DocsService()
channel_logger = ChannelLogger()
sheets_service = SheetsService()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç—ã –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–µ—Ç. "
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ö–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏?\n"
        "- –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —Ä–æ–∑—ã?\n"
        "- –•–æ—á—É –∫—É–ø–∏—Ç—å –±—É–∫–µ—Ç –∏–∑ –ø–∏–æ–Ω–æ–≤\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )
    await update.message.reply_text(welcome_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.effective_user
    await supabase_service.update_user_preferences(user.id, {
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'language_code': user.language_code
    })

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üå∏ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n"
        "- –£–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ —Ü–µ–Ω—ã –Ω–∞ —Ü–≤–µ—Ç—ã\n"
        "- –ü–æ–¥–æ–±—Ä–∞—Ç—å –±—É–∫–µ—Ç\n"
        "- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–≤–µ—Ç–∞—Ö\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    await update.message.reply_text(help_text)

async def get_channel_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channel_id"""
    if update.message.forward_from_chat:
        channel_id = update.message.forward_from_chat.id
        await update.message.reply_text(
            f"ID –∫–∞–Ω–∞–ª–∞: {channel_id}\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —Ñ–∞–π–ª .env –∫–∞–∫:\n"
            f"TELEGRAM_LOG_CHANNEL_ID={channel_id}"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"Processing message from user {user_id}: {user_message}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_context = await supabase_service.get_conversation_context(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ Google Sheets
        try:
            logger.info("Fetching inventory data from Google Sheets")
            inventory_data = await sheets_service.get_inventory_data()
            logger.info(f"Received inventory data: {inventory_data}")
            
            inventory_info = sheets_service.format_inventory_for_openai(inventory_data)
            logger.info(f"Formatted inventory info: {inventory_info}")
        except Exception as e:
            logger.error(f"Error getting inventory data: {e}", exc_info=True)
            inventory_info = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö."
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_preferences = await supabase_service.get_user_preferences(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è OpenAI
        context_data = {
            'user_preferences': user_preferences,
            'conversation_context': conversation_context,
            'current_time': datetime.datetime.now().isoformat()
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        logger.info("Getting response from OpenAI")
        response = await openai_service.get_response(user_message, inventory_info, user_id)
        logger.info(f"OpenAI response: {response}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        await supabase_service.save_conversation(user_id, user_message, response)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Å–∞–π—Ç–æ–≤
        await analyze_message(user_id, user_message, response)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await channel_logger.log_message(update.message, response)
        
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_message, exc_info=True)
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def analyze_message(user_id: int, user_message: str, bot_response: str):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Å–∞–π—Ç–æ–≤"""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        intent = await openai_service.analyze_intent(user_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç
        await supabase_service.save_user_insight(user_id, 'message_intent', {
            'message': user_message,
            'intent': intent
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        await supabase_service.save_interaction_pattern(user_id, 'conversation', {
            'user_message': user_message,
            'bot_response': bot_response,
            'intent': intent
        })
        
    except Exception as e:
        logger.error(f"Failed to analyze message: {str(e)}", exc_info=True)
