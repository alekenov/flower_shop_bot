import requests
import logging
from typing import Optional, List, Dict

logger = logging.getLogger(__name__)

class TelegramGroupService:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.main_chat_id = "-1002349745989"
        self.topic_descriptions = {
            "üìù –õ–æ–≥–∏": """üîç *–¢–µ–º–∞ –¥–ª—è –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã*

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏""",

            "üéì –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞": """üìö *–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞*

‚Ä¢ –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é""",

            "üêõ –û—à–∏–±–∫–∏ –∏ –±–∞–≥–∏": """üîß *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫*

‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
‚Ä¢ –°—Ç–∞—Ç—É—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å –±–∞–≥–æ–≤
‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π""",

            "üì∏ Instagram Support": """üì± *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Instagram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏*

‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Å—Ç–∞–º–∏
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞""",

            "üì± Telegram Support": """üí¨ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞*

‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏""",

            "üí¨ WhatsApp Support": """üì≤ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏*

‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        }

    def create_forum(self, title: str) -> Optional[int]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä—É–º (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É) —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
        """
        try:
            response = requests.post(
                f"{self.base_url}/createForumTopic",
                json={
                    "chat_id": self.main_chat_id,
                    "name": title,
                    "icon_color": 0x6FB9F0
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                topic_id = result["result"]["message_thread_id"]
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ —Ñ–æ—Ä—É–º–∞: {title}, ID: {topic_id}")
                return topic_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞: {response.json()}")
                return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞: {str(e)}")
            return None

    def send_message_to_topic(self, topic_id: int, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞
        """
        try:
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json={
                    "chat_id": self.main_chat_id,
                    "message_thread_id": topic_id,
                    "text": message,
                    "parse_mode": "Markdown"
                }
            )
            
            if response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É {topic_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.json()}")
                return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def create_support_structure(self) -> Dict[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–º –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏—Ö ID
        """
        topic_ids = {}
        
        for topic_name in self.topic_descriptions.keys():
            topic_id = self.create_forum(topic_name)
            if topic_id:
                topic_ids[topic_name] = topic_id
                logger.info(f"–¢–µ–º–∞ '{topic_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–º—É
                if self.send_message_to_topic(topic_id, self.topic_descriptions[topic_name]):
                    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã '{topic_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã '{topic_name}'")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É '{topic_name}'")
        
        return topic_ids

    def delete_topic(self, topic_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞
        """
        try:
            response = requests.post(
                f"{self.base_url}/deleteForumTopic",
                json={
                    "chat_id": self.main_chat_id,
                    "message_thread_id": topic_id
                }
            )
            
            if response.status_code == 200:
                logger.info(f"–¢–µ–º–∞ {topic_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {response.json()}")
                return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}")
            return False

    def get_topics(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º —Ñ–æ—Ä—É–º–∞
        """
        try:
            response = requests.post(
                f"{self.base_url}/getForumTopics",
                json={
                    "chat_id": self.main_chat_id
                }
            )
            
            if response.status_code == 200:
                return response.json()["result"]["topics"]
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {response.json()}")
                return []
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {str(e)}")
            return []

    def cleanup_duplicate_topics(self):
        """
        –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ–º—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ
        """
        topics = self.get_topics()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
        topic_groups = {}
        for topic in topics:
            name = topic["name"]
            if name not in topic_groups:
                topic_groups[name] = []
            topic_groups[name].append(topic["message_thread_id"])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        for name, topic_ids in topic_groups.items():
            if len(topic_ids) > 1:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–±–æ–ª—å—à–∏–π ID = –±–æ–ª–µ–µ –Ω–æ–≤–∞—è —Ç–µ–º–∞)
                topic_ids.sort()
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–º—É, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for topic_id in topic_ids[:-1]:
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–π—Å—è —Ç–µ–º—ã '{name}' —Å ID {topic_id}")
                    self.delete_topic(topic_id)

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    bot_token = "5261424288:AAE2QYTnulLeyd6BdanhhzxLFnhAbXvBI7w"
    service = TelegramGroupService(bot_token)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    topic_ids = service.create_support_structure()
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ–º—ã
    service.cleanup_duplicate_topics()

    # –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–º –∏ –∏—Ö ID
    logger.info("–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ –∏—Ö ID:")
    for topic_name, topic_id in topic_ids.items():
        logger.info(f"{topic_name}: {topic_id}")

if __name__ == "__main__":
    main()
