import requests
import logging
import time
from typing import Dict, List, Optional, Tuple

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class ReactionAnalyzer:
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.chat_id = chat_id
        self.learning_topic_id = 145  # ID —Ç–µ–º—ã "–û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞"

    def get_message_reactions(self, message_id: int) -> Tuple[int, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (likes, dislikes)
        """
        try:
            response = requests.get(
                f"{self.base_url}/getMessage",
                params={
                    "chat_id": self.chat_id,
                    "message_id": message_id
                }
            )
            
            if response.status_code == 200:
                message = response.json()["result"]
                if "reactions" in message:
                    reactions = message["reactions"]
                    likes = sum(1 for r in reactions if r["type"] == "emoji" and r["emoji"] == "üëç")
                    dislikes = sum(1 for r in reactions if r["type"] == "emoji" and r["emoji"] == "üëé")
                    return likes, dislikes
                return 0, 0
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.json()}")
                return 0, 0
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π: {str(e)}")
            return 0, 0

    def forward_message(self, message_id: int, from_topic_id: int) -> bool:
        """
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞
        """
        try:
            response = requests.post(
                f"{self.base_url}/forwardMessage",
                json={
                    "chat_id": self.chat_id,
                    "message_thread_id": self.learning_topic_id,
                    "from_chat_id": self.chat_id,
                    "message_id": message_id
                }
            )
            
            if response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ç–æ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(
                    self.learning_topic_id,
                    f"‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –¥–∏–∑–ª–∞–π–∫ –≤ —Ç–µ–º–µ {from_topic_id}. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ."
                )
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.json()}")
                return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def send_message(self, topic_id: int, text: str) -> Optional[int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
        """
        try:
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json={
                    "chat_id": self.chat_id,
                    "message_thread_id": topic_id,
                    "text": text,
                    "parse_mode": "Markdown"
                }
            )
            
            if response.status_code == 200:
                return response.json()["result"]["message_id"]
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.json()}")
                return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None

    def analyze_topic_messages(self, topic_id: int):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–∫—Ü–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            response = requests.get(
                f"{self.base_url}/getUpdates",
                params={
                    "offset": -1,  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    "limit": 100    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                }
            )
            
            if response.status_code == 200:
                updates = response.json()["result"]
                for update in updates:
                    if "message" in update:
                        msg = update["message"]
                        if "message_thread_id" in msg and msg["message_thread_id"] == topic_id:
                            message_id = msg["message_id"]
                            likes, dislikes = self.get_message_reactions(message_id)
                            
                            if dislikes > likes:
                                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–ª—É—á–∏–ª–æ –±–æ–ª—å—à–µ –¥–∏–∑–ª–∞–π–∫–æ–≤ ({dislikes}>{likes})")
                                self.forward_message(message_id, topic_id)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.json()}")
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º—ã: {str(e)}")

def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    BOT_TOKEN = "5261424288:AAE2QYTnulLeyd6BdanhhzxLFnhAbXvBI7w"
    CHAT_ID = "-1002349745989"
    
    analyzer = ReactionAnalyzer(BOT_TOKEN, CHAT_ID)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    topics = [
        (143, "üìù –õ–æ–≥–∏"),
        (145, "üéì –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞"),
        (147, "üêõ –û—à–∏–±–∫–∏ –∏ –±–∞–≥–∏"),
        (149, "üì∏ Instagram Support"),
        (161, "üì± Telegram Support"),
        (163, "üí¨ WhatsApp Support")
    ]
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É
    for topic_id, topic_name in topics:
        logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ç–µ–º—ã: {topic_name}")
        analyzer.analyze_topic_messages(topic_id)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏

if __name__ == "__main__":
    main()
