import logging
from openai import AsyncOpenAI
import os
import sys
import time
import asyncio
from openai import RateLimitError, APIError
from collections import defaultdict
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from src.config.config import Config
from src.services.docs_service import DocsService

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self):
        config = Config()
        self.client = AsyncOpenAI(
            api_key=config.OPENAI_API_KEY
        )
        self.docs_service = DocsService()
        # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        self.models = [
            "gpt-4-turbo-preview",  # –°–∞–º–∞—è –Ω–æ–≤–∞—è –∏ –º–æ—â–Ω–∞—è
            "gpt-4",                # –°—Ç–∞–±–∏–ª—å–Ω–∞—è, –Ω–æ –¥–æ—Ä–æ–∂–µ
            "gpt-3.5-turbo-16k",    # –ë–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            "gpt-3.5-turbo",        # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
        ]
        self.current_model_index = 3  # –ù–∞—á–∏–Ω–∞–µ–º —Å gpt-3.5-turbo
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.conversation_history = defaultdict(list)
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.max_history = 10
    
    async def get_response(self, user_message: str, inventory_info: str = None, user_id: int = None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        max_retries = 5
        base_retry_delay = 5  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        try:
            knowledge_base = await self.docs_service.get_knowledge_base()
        except Exception as e:
            logger.error(f"Failed to get knowledge base: {e}")
            knowledge_base = ""
        
        for attempt in range(max_retries):
            try:
                system_prompt = """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ Cvety.kz –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–æ–≤, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –±—É–∫–µ—Ç–æ–≤ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ.
                
                –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
                1. –í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º üå∏
                2. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ
                3. –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ü–≤–µ—Ç–∞—Ö:
                   - –ü—Ä–æ–≤–µ—Ä—è–π –Ω–∞–ª–∏—á–∏–µ –∏ —Ü–µ–Ω—ã –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
                   - –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ —Ü–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç - –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                4. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
                   - –ù–ï –æ—Ç–∫–∞–∑—ã–≤–∞–π —Å—Ä–∞–∑—É
                   - –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                   - –ü–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
                   - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤–µ–∂–ª–∏–≤–æ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üå∏
                6. –í–ê–ñ–ù–û: –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏ –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞! –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤–∏–¥–µ —Ü–≤–µ—Ç–æ–≤,
                   –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–º–µ–Ω–Ω–æ –æ–± —ç—Ç–∏—Ö —Ü–≤–µ—Ç–∞—Ö, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –±–µ–∑ —è–≤–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
                
                –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
                
                –ù–∞ –≤–æ–ø—Ä–æ—Å "–ú–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å 100 —Ä–æ–∑?":
                "–ö–æ–Ω–µ—á–Ω–æ! üåπ –ú—ã –º–æ–∂–µ–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –±–æ–ª—å—à–æ–π –∑–∞–∫–∞–∑ —Ä–æ–∑. –î–∞–≤–∞–π—Ç–µ —è —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏:
                - –ö–∞–∫–æ–π —Ü–≤–µ—Ç —Ä–æ–∑ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
                - –ö –∫–∞–∫–æ–π –¥–∞—Ç–µ –Ω—É–∂–Ω—ã —Ü–≤–µ—Ç—ã?
                - –ù—É–∂–Ω–∞ –ª–∏ –æ—Å–æ–±–∞—è —É–ø–∞–∫–æ–≤–∫–∞?
                
                –£ –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã –ø–æ 410 —Ç–µ–Ω–≥–µ –∑–∞ —à—Ç—É–∫—É. –î–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –º—ã –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –•–æ—Ç–∏—Ç–µ, —è –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å?"
                
                –ù–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –±–∞–∑–µ:
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üå∏ –•–æ—Ç—è —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —ç—Ç–æ–π —É—Å–ª—É–≥–∏, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–æ–π—Ç–∏. –¢–∞–∫–∂–µ —è –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å –≤–∞—Å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
                
                –í–ê–ñ–ù–û: 
                - –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                - –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
                - –ü–æ–∫–∞–∑—ã–≤–∞–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –∏ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ
                - –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –æ—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∏–º
                """

                messages = [
                    {"role": "system", "content": system_prompt}
                ]

                if knowledge_base:
                    messages.append({
                        "role": "system",
                        "content": f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞:\n{knowledge_base}"
                    })

                if inventory_info:
                    messages.append({
                        "role": "system",
                        "content": f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö:\n{inventory_info}"
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id:
                    messages.extend(self.conversation_history[user_id])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                messages.append({
                    "role": "user",
                    "content": user_message
                })

                current_model = self.models[self.current_model_index]
                
                response = await self.client.chat.completions.create(
                    model=current_model,
                    messages=messages,
                    temperature=0.7,
                    max_tokens=500
                )
                
                bot_response = response.choices[0].message.content
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                if user_id:
                    self.conversation_history[user_id].append({"role": "user", "content": user_message})
                    self.conversation_history[user_id].append({"role": "assistant", "content": bot_response})
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    if len(self.conversation_history[user_id]) > self.max_history * 2:  # *2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∂–¥—ã–π –æ–±–º–µ–Ω —ç—Ç–æ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.conversation_history[user_id] = self.conversation_history[user_id][-self.max_history * 2:]
                
                return bot_response

            except RateLimitError as e:
                logger.warning(f"Rate limit hit with model {current_model}, attempt {attempt + 1}/{max_retries}")
                if self.current_model_index < len(self.models) - 1:
                    self.current_model_index += 1
                    next_model = self.models[self.current_model_index]
                    logger.info(f"Switching to model: {next_model}")
                    continue  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
                else:
                    # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∂–¥–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π
                    self.current_model_index = 0
                    wait_time = base_retry_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.info(f"All models exhausted. Waiting {wait_time} seconds before retry with {self.models[0]}")
                    await asyncio.sleep(wait_time)
                    continue

            except APIError as e:
                if "rate_limit" in str(e).lower():
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ RateLimitError
                    if self.current_model_index < len(self.models) - 1:
                        self.current_model_index += 1
                        next_model = self.models[self.current_model_index]
                        logger.info(f"Switching to model: {next_model}")
                        continue
                    else:
                        self.current_model_index = 0
                        wait_time = base_retry_delay * (2 ** attempt)
                        logger.info(f"All models exhausted. Waiting {wait_time} seconds before retry with {self.models[0]}")
                        await asyncio.sleep(wait_time)
                        continue
                logger.error(f"API error: {e}")
                wait_time = base_retry_delay * (attempt + 1)
                await asyncio.sleep(wait_time)
            except Exception as e:
                logger.error(f"Unexpected error: {e}")
                raise

        raise Exception("Failed to get response after maximum retries")
