import logging
from openai import AsyncOpenAI
import os
import sys
import time
import asyncio
from openai import RateLimitError, APIError
from collections import defaultdict
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from src.config.config import Config
from src.services.docs_service import DocsService

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self):
        config = Config()
        self.client = AsyncOpenAI(
            api_key=config.OPENAI_API_KEY
        )
        self.docs_service = DocsService()
        # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        self.models = [
            "gpt-4-turbo-preview",  # –°–∞–º–∞—è –Ω–æ–≤–∞—è –∏ –º–æ—â–Ω–∞—è
            "gpt-4",                # –°—Ç–∞–±–∏–ª—å–Ω–∞—è, –Ω–æ –¥–æ—Ä–æ–∂–µ
            "gpt-3.5-turbo-16k",    # –ë–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            "gpt-3.5-turbo",        # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
        ]
        self.current_model_index = 3  # –ù–∞—á–∏–Ω–∞–µ–º —Å gpt-3.5-turbo
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.conversation_history = defaultdict(list)
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.max_history = 10
    
    async def get_relevant_knowledge(self, user_message: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞
            sections = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ
            message_lower = user_message.lower()
            
            if any(word in message_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏—Ç', '—Å–∫–æ–ª—å–∫–æ', '—Ä—É–±–ª', '—Ç–µ–Ω–≥–µ']):
                sections.append("## 2. –ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã")
            
            if any(word in message_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–ø—Ä–∏–≤–µ–∑—Ç–∏', '–¥–æ—Å—Ç–∞–≤–∏—Ç—å', '–∫—É—Ä—å–µ—Ä']):
                sections.append("## 3. –î–æ—Å—Ç–∞–≤–∫–∞")
            
            if any(word in message_lower for word in ['–æ–ø–ª–∞—Ç–∞', '–æ–ø–ª–∞—Ç–∏—Ç—å', '–∫–∞—Ä—Ç–∞', '–Ω–∞–ª–∏—á–Ω—ã–µ', 'kaspi']):
                sections.append("## 4. –û–ø–ª–∞—Ç–∞")
            
            if any(word in message_lower for word in ['–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞', '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞', '—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']):
                sections.append("## 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            
            if any(word in message_lower for word in ['—Ä–æ–∑–∞', '—Ä–æ–∑—ã']):
                sections.append("### 2.1 –†–æ–∑—ã")
            
            if any(word in message_lower for word in ['–±—É–∫–µ—Ç']):
                sections.append("### 2.2 –ë—É–∫–µ—Ç—ã")
            
            # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º FAQ
            sections.append("## 6. FAQ")
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            relevant_info = []
            for section in sections:
                content = await self.docs_service.get_section_content(section)
                if content:
                    relevant_info.append(f"=== {section} ===\n{content}")
            
            return "\n\n".join(relevant_info)
            
        except Exception as e:
            logger.error(f"Failed to get relevant knowledge: {e}")
            return ""

    async def get_response(self, user_message: str, inventory_info: str = None, user_id: int = None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        max_retries = 5
        base_retry_delay = 5  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        logger.info(f"Processing message from user {user_id}: {user_message}")
        logger.info(f"Inventory info: {inventory_info}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        try:
            relevant_knowledge = await self.get_relevant_knowledge(user_message)
            logger.info(f"Got relevant knowledge: {relevant_knowledge}")
        except Exception as e:
            logger.error(f"Failed to get relevant knowledge: {e}")
            relevant_knowledge = ""

        for attempt in range(max_retries):
            try:
                system_prompt = self._get_system_prompt()
                messages = [
                    {"role": "system", "content": system_prompt}
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
                if inventory_info:
                    messages.append({
                        "role": "system",
                        "content": f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤:\n{inventory_info}\n\n–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞–ª–∏—á–∏–∏ –∏ —Ü–µ–Ω–∞—Ö."
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                if relevant_knowledge:
                    messages.append({
                        "role": "system",
                        "content": f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{relevant_knowledge}"
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                if user_id:
                    messages.extend(self.conversation_history[user_id])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                messages.append({
                    "role": "user",
                    "content": user_message
                })

                current_model = self.models[self.current_model_index]
                
                response = await self.client.chat.completions.create(
                    model=current_model,
                    messages=messages,
                    temperature=0.7,
                    max_tokens=800
                )
                
                bot_response = response.choices[0].message.content
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                if user_id:
                    self.conversation_history[user_id].append({"role": "user", "content": user_message})
                    self.conversation_history[user_id].append({"role": "assistant", "content": bot_response})
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    if len(self.conversation_history[user_id]) > self.max_history * 2:
                        self.conversation_history[user_id] = self.conversation_history[user_id][-self.max_history * 2:]
                
                return bot_response

            except RateLimitError as e:
                if attempt == max_retries - 1:
                    raise
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                delay = base_retry_delay * (2 ** attempt)
                logger.warning(f"Rate limit hit, waiting {delay} seconds...")
                await asyncio.sleep(delay)
                
            except APIError as e:
                if attempt == max_retries - 1:
                    raise
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
                self.current_model_index = min(self.current_model_index + 1, len(self.models) - 1)
                logger.warning(f"API error, switching to model {self.models[self.current_model_index]}")
                
            except Exception as e:
                logger.error(f"Error getting OpenAI response: {str(e)}")
                raise

    def _get_system_prompt(self):
        """Get the system prompt for OpenAI."""
        return """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ Flower Shop Bot. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤.

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
1. –í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
2. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
3. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
4. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è
5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ üå∏
6. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —Ü–µ–Ω—É –≤ —Ç–µ–Ω–≥–µ (—Ç–≥)
7. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–º

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. list_available_products() - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
2. get_product_info(product_name) - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
3. check_availability(product_name, quantity) - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
4. place_order(...) - –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏:
1. –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ –Ω–∞–ª–∏—á–∏–∏:
   - –ò—Å–ø–æ–ª—å–∑—É–π get_product_info() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å, —É–∫–∞–∂–∏ —Ü–µ–Ω—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
   - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π list_available_products() –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã

2. –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:
   - –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ —á–µ—Ä–µ–∑ check_availability()
   - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–æ–±–µ—Ä–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
     * –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
     * –î–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
     * –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
     * –¢–µ–ª–µ—Ñ–æ–Ω
   - –ò—Å–ø–æ–ª—å–∑—É–π place_order() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
   - –°–æ–æ–±—â–∏ –∫–ª–∏–µ–Ω—Ç—É –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ

3. –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ —Ü–µ–Ω–∞—Ö:
   - –ò—Å–ø–æ–ª—å–∑—É–π get_product_info()
   - –£–∫–∞–∂–∏ —Ü–µ–Ω—É –∑–∞ —à—Ç—É–∫—É
   - –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 10 —à—Ç—É–∫ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:

–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ª–∏—á–∏–∏:
üå∏ –í –Ω–∞–ª–∏—á–∏–∏:
- –ö—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã: 5000 —Ç–≥/—à—Ç (50 —à—Ç)
- –ë–µ–ª—ã–µ –ª–∏–ª–∏–∏: 3000 —Ç–≥/—à—Ç (–æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ - 5 —à—Ç)
- –¢—é–ª—å–ø–∞–Ω—ã: 2000 —Ç–≥/—à—Ç (100 —à—Ç)

–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:
‚ú® –ó–∞–∫–∞–∑ ‚ÑñORD-123 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
- –¢–æ–≤–∞—Ä: –ö—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã (5 —à—Ç)
- –°—É–º–º–∞: 25000 —Ç–≥
- –î–æ—Å—Ç–∞–≤–∫–∞: 1500 —Ç–≥
–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: 26500 —Ç–≥
"""
