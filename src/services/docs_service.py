import os
import logging
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from src.config.config import Config

logger = logging.getLogger(__name__)

class DocsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Docs."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Docs."""
        try:
            config = Config()
            credentials = service_account.Credentials.from_service_account_file(
                config.GOOGLE_SHEETS_CREDENTIALS_FILE,
                scopes=['https://www.googleapis.com/auth/documents']
            )
            self.service = build('docs', 'v1', credentials=credentials)
            self.knowledge_base_doc_id = config.GOOGLE_DOCS_KNOWLEDGE_BASE_ID
            logger.info("Successfully initialized Google Docs service")
        except Exception as e:
            logger.error(f"Failed to initialize Google Docs service: {e}")
            raise

    async def add_unanswered_question(self, question: str, user_id: int, bot_response: str = None, response_type: str = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—Ü–∏—é –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = self.service.documents().get(documentId=self.knowledge_base_doc_id).execute()
            
            # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            active_questions_index = self._find_section_index(doc, "## –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            
            if active_questions_index == -1:
                logger.error("Active questions section not found")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                active_questions_index = 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
            question_text = f"""

[–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è]
–î–∞—Ç–∞: {current_time}
–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}
–¢–∏–ø: {response_type}

–í–æ–ø—Ä–æ—Å: 
{question}

–û—Ç–≤–µ—Ç –±–æ—Ç–∞:
{bot_response if bot_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}

–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
- [ ] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
- [ ] –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
- [ ] –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –±–æ—Ç–∞
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è

---"""
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞
            requests = [
                {
                    'insertText': {
                        'location': {
                            'index': active_questions_index + len("## –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
                        },
                        'text': question_text
                    }
                }
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = self.service.documents().batchUpdate(
                documentId=self.knowledge_base_doc_id,
                body={'requests': requests}
            ).execute()
            
            logger.info(f"Successfully added question from user {user_id}: {result}")
            
        except Exception as e:
            logger.error(f"Failed to add unanswered question: {e}")
            logger.error(f"Document ID: {self.knowledge_base_doc_id}")
            raise

    def _find_section_index(self, doc: dict, section_title: str) -> int:
        """–ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É."""
        content = doc.get('body', {}).get('content', [])
        full_text = ""
        current_index = 1  # Google Docs –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –∏–Ω–¥–µ–∫—Å–∞ 1
        
        for element in content:
            if 'paragraph' in element:
                for part in element['paragraph'].get('elements', []):
                    text = part.get('textRun', {}).get('content', '')
                    if section_title in text:
                        return current_index
                    full_text += text
                    current_index += len(text)
        
        return -1

    async def get_knowledge_base(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        try:
            doc = self.service.documents().get(documentId=self.knowledge_base_doc_id).execute()
            content = doc.get('body', {}).get('content', [])
            
            full_text = ""
            for element in content:
                if 'paragraph' in element:
                    for part in element['paragraph'].get('elements', []):
                        text = part.get('textRun', {}).get('content', '')
                        full_text += text
            
            return full_text
            
        except Exception as e:
            logger.error(f"Failed to get knowledge base: {e}")
            raise

    async def create_initial_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        try:
            initial_content = """# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π Cvety.kz üå∏

## –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
[–ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏]

---

## –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã

### 1. –ó–∞–∫–∞–∑—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∞
–í: –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?
–û: –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É, –∫–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å. –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç—ã, —É–∫–∞–∂–µ—Ç —Ü–µ–Ω—ã –∏ –æ—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑.

–í: –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?
–û: –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É —Å 9:00 –¥–æ 21:00. –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

### 2. –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ —Ü–µ–Ω—ã
–í: –ö–∞–∫ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏?
–û: –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É "–ø–æ–∫–∞–∂–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç" –∏–ª–∏ "–∫–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –µ—Å—Ç—å?", –∏ –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏.

–í: –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ?
–û: –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑. –£–∫–∞–∂–∏—Ç–µ –±–æ—Ç—É –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.

### 3. –û–ø–ª–∞—Ç–∞
–í: –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?
–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç.

–í: –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑?
–û: –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç. –ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å –±—É–∫–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.

### 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
–í: –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –±—É–∫–µ—Ç—É –æ—Ç–∫—Ä—ã—Ç–∫—É?
–û: –î–∞, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ.

–í: –ï—Å—Ç—å –ª–∏ —É–ø–∞–∫–æ–≤–∫–∞ –¥–ª—è –±—É–∫–µ—Ç–æ–≤?
–û: –í—Å–µ –Ω–∞—à–∏ –±—É–∫–µ—Ç—ã –∫—Ä–∞—Å–∏–≤–æ —É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä."""

            requests = [
                {
                    'insertText': {
                        'location': {
                            'index': 1
                        },
                        'text': initial_content
                    }
                }
            ]
            
            self.service.documents().batchUpdate(
                documentId=self.knowledge_base_doc_id,
                body={'requests': requests}
            ).execute()
            
            logger.info("Successfully created initial document structure")
            
        except Exception as e:
            logger.error(f"Failed to create initial structure: {e}")
            raise
