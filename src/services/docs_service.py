import os
import json
import logging
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from src.config.config import Config

logger = logging.getLogger(__name__)

class DocsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Docs."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Docs."""
        try:
            config = Config()
            credentials_info = json.loads(config.GOOGLE_CREDENTIALS)
            credentials = service_account.Credentials.from_service_account_info(
                credentials_info,
                scopes=['https://www.googleapis.com/auth/documents']
            )
            self.service = build('docs', 'v1', credentials=credentials)
            self.knowledge_base_doc_id = config.GOOGLE_DOCS_KNOWLEDGE_BASE_ID
            logger.info("Successfully initialized Google Docs service")
        except Exception as e:
            logger.error(f"Failed to initialize Google Docs service: {e}")
            raise

    async def add_unanswered_question(self, question: str, user_id: int, bot_response: str = None, response_type: str = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—Ü–∏—é –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = self.service.documents().get(documentId=self.knowledge_base_doc_id).execute()
            
            # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            active_questions_index = self._find_section_index(doc, "## –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            
            if active_questions_index == -1:
                logger.error("Active questions section not found")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                active_questions_index = 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
            question_text = f"""

[–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è]
–î–∞—Ç–∞: {current_time}
–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}
–¢–∏–ø: {response_type}

–í–æ–ø—Ä–æ—Å: 
{question}

–û—Ç–≤–µ—Ç –±–æ—Ç–∞:
{bot_response if bot_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}

–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
- [ ] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
- [ ] –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
- [ ] –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –±–æ—Ç–∞
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è

---"""
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞
            requests = [
                {
                    'insertText': {
                        'location': {
                            'index': active_questions_index + len("## –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
                        },
                        'text': question_text
                    }
                }
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = self.service.documents().batchUpdate(
                documentId=self.knowledge_base_doc_id,
                body={'requests': requests}
            ).execute()
            
            logger.info(f"Successfully added question from user {user_id}: {result}")
            
        except Exception as e:
            logger.error(f"Failed to add unanswered question: {e}")
            logger.error(f"Document ID: {self.knowledge_base_doc_id}")
            raise

    def _find_section_index(self, doc: dict, section_title: str) -> int:
        """–ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É."""
        content = doc.get('body', {}).get('content', [])
        full_text = ""
        current_index = 1  # Google Docs –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –∏–Ω–¥–µ–∫—Å–∞ 1
        
        for element in content:
            if 'paragraph' in element:
                for part in element['paragraph'].get('elements', []):
                    text = part.get('textRun', {}).get('content', '')
                    if section_title in text:
                        return current_index
                    full_text += text
                    current_index += len(text)
        
        return -1

    async def get_knowledge_base(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        try:
            doc = self.service.documents().get(documentId=self.knowledge_base_doc_id).execute()
            content = doc.get('body', {}).get('content', [])
            
            full_text = ""
            for element in content:
                if 'paragraph' in element:
                    for part in element['paragraph'].get('elements', []):
                        text = part.get('textRun', {}).get('content', '')
                        full_text += text
            
            return full_text
            
        except Exception as e:
            logger.error(f"Failed to get knowledge base: {e}")
            raise

    async def create_initial_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        try:
            initial_content = """# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π Cvety.kz üå∏

## 1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
### –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã
- –ú–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00
- –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å 9:00 –¥–æ 20:00
- –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞

### –ö–æ–Ω—Ç–∞–∫—Ç—ã
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
- Email: info@cvety.kz
- Instagram: @cvety.kz
- Telegram: @cvetykz_bot

### –õ–æ–∫–∞—Ü–∏–∏
- –ì–ª–∞–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: [–∞–¥—Ä–µ—Å]
- –ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏: [–∞–¥—Ä–µ—Å–∞]

## 2. –ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã
### 2.1 –†–æ–∑—ã
#### –í–∏–¥—ã —Ä–æ–∑
- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–∑—ã (40, 50, 60, 70 —Å–º)
- –ü–∏–æ–Ω–æ–≤–∏–¥–Ω—ã–µ —Ä–æ–∑—ã
- –ö—É—Å—Ç–æ–≤—ã–µ —Ä–æ–∑—ã
- –ü—Ä–µ–º–∏—É–º —Å–æ—Ä—Ç–∞

#### –¶–µ–Ω—ã –Ω–∞ —Ä–æ–∑—ã
- 40 —Å–º: –æ—Ç X —Ç–µ–Ω–≥–µ/—à—Ç
- 50 —Å–º: –æ—Ç X —Ç–µ–Ω–≥–µ/—à—Ç
- 60 —Å–º: –æ—Ç X —Ç–µ–Ω–≥–µ/—à—Ç
- 70 —Å–º: –æ—Ç X —Ç–µ–Ω–≥–µ/—à—Ç

#### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
- –°–≤–µ–∂–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
- –ì–∞—Ä–∞–Ω—Ç–∏—è —Å–≤–µ–∂–µ—Å—Ç–∏ 7 –¥–Ω–µ–π
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞

### 2.2 –ë—É–∫–µ—Ç—ã
#### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–∫–µ—Ç–æ–≤
- –ú–æ–Ω–æ–±—É–∫–µ—Ç—ã –∏–∑ —Ä–æ–∑
- –°–º–µ—à–∞–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã
- –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
- –ë—É–∫–µ—Ç—ã –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏

#### –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
- –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–µ: –¥–æ X —Ç–µ–Ω–≥–µ
- –°—Ç–∞–Ω–¥–∞—Ä—Ç: X-Y —Ç–µ–Ω–≥–µ
- –ü—Ä–µ–º–∏—É–º: –æ—Ç Y —Ç–µ–Ω–≥–µ

### 2.3 –ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
- –í–∏–¥—ã —Ä–∞—Å—Ç–µ–Ω–∏–π
- –£—Ö–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –¶–µ–Ω—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∞

### 2.4 –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
[–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏]

## 3. –î–æ—Å—Ç–∞–≤–∫–∞
### 3.1 –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
#### –ó–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
- –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞: X —Ç–µ–Ω–≥–µ
- –°–ø–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã: Y —Ç–µ–Ω–≥–µ
- –ü—Ä–∏–≥–æ—Ä–æ–¥: Z —Ç–µ–Ω–≥–µ

#### –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
- –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è: 2-3 —á–∞—Å–∞
- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è

### 3.2 –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
- –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 1 —á–∞—Å
- –£—Å–ª–æ–≤–∏—è —Å—Ä–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

### 3.3 –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
- –ì–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏

## 4. –û–ø–ª–∞—Ç–∞
### –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
- –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
- –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
- Kaspi –ø–µ—Ä–µ–≤–æ–¥—ã
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞

### –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã
- –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
- –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è

### –í–æ–∑–≤—Ä–∞—Ç –∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏
- –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
- –ì–∞—Ä–∞–Ω—Ç–∏—è —Å–≤–µ–∂–µ—Å—Ç–∏
- –ó–∞–º–µ–Ω–∞ –±—É–∫–µ—Ç–∞

## 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
### 5.1 –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏
[–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ]

### 5.2 –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
- –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤
- –°–∫–∏–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
- –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è

### 5.3 –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
- –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç
- –û—Ç—Å—Ä–æ—á–∫–∞ –ø–ª–∞—Ç–µ–∂–∞

## 6. FAQ (–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã)
[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π —Ä–∞–∑–¥–µ–ª]

## 7. –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
[–ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏]

## 8. –ü—Ä–∏–º–µ—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤
### 8.1 –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
#### –ü—Ä–∏–º–µ—Ä 1: –ó–∞–∫–∞–∑ –±—É–∫–µ—Ç–∞
–í: –•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç —Ä–æ–∑
–û: –ö–æ–Ω–µ—á–Ω–æ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç. –ö–∞–∫–æ–π –¥–ª–∏–Ω—ã —Ä–æ–∑—ã –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? –£ –Ω–∞—Å –µ—Å—Ç—å —Ä–æ–∑—ã 40, 50, 60 –∏ 70 —Å–º.

#### –ü—Ä–∏–º–µ—Ä 2: –î–æ—Å—Ç–∞–≤–∫–∞
–í: –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ [—Ä–∞–π–æ–Ω]?
–û: –î–æ—Å—Ç–∞–≤–∫–∞ –≤ [—Ä–∞–π–æ–Ω] —Å—Ç–æ–∏—Ç X —Ç–µ–Ω–≥–µ. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ 2-3 —á–∞—Å–∞. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?

### 8.2 –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
[–ü—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π]

### 8.3 –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
[–ü—Ä–∏–º–µ—Ä—ã –æ—Å–æ–±–æ —É–¥–∞—á–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤]

## 9. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
- –í–µ—Ä—Å–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: 1.0
- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: [–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ]
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: [–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ]
- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: [–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ]"""

            requests = [
                {
                    'insertText': {
                        'location': {
                            'index': 1
                        },
                        'text': initial_content
                    }
                }
            ]
            
            self.service.documents().batchUpdate(
                documentId=self.knowledge_base_doc_id,
                body={'requests': requests}
            ).execute()
            
            logger.info("Successfully created initial document structure")
            
        except Exception as e:
            logger.error(f"Failed to create initial structure: {e}")
            raise

    async def get_section_content(self, section_title: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
        try:
            doc = self.service.documents().get(documentId=self.knowledge_base_doc_id).execute()
            content = doc.get('body', {}).get('content', [])
            
            section_start = self._find_section_index(doc, section_title)
            if section_start == -1:
                logger.error(f"Section {section_title} not found")
                return ""
            
            next_section_start = -1
            full_text = ""
            current_index = 1
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≥–æ –∂–µ –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            for element in content:
                if 'paragraph' in element:
                    for part in element['paragraph'].get('elements', []):
                        text = part.get('textRun', {}).get('content', '')
                        if current_index > section_start and text.strip().startswith('#'):
                            next_section_start = current_index
                            break
                        current_index += len(text)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞
            current_index = 1
            is_in_section = False
            for element in content:
                if 'paragraph' in element:
                    for part in element['paragraph'].get('elements', []):
                        text = part.get('textRun', {}).get('content', '')
                        if current_index == section_start:
                            is_in_section = True
                        if next_section_start != -1 and current_index >= next_section_start:
                            is_in_section = False
                        if is_in_section:
                            full_text += text
                        current_index += len(text)
            
            return full_text.strip()
            
        except Exception as e:
            logger.error(f"Failed to get section content: {e}")
            raise

    async def update_section(self, section_title: str, new_content: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
        try:
            doc = self.service.documents().get(documentId=self.knowledge_base_doc_id).execute()
            section_start = self._find_section_index(doc, section_title)
            
            if section_start == -1:
                logger.error(f"Section {section_title} not found")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞
            content = doc.get('body', {}).get('content', [])
            next_section_start = -1
            current_index = 1
            
            for element in content:
                if 'paragraph' in element:
                    for part in element['paragraph'].get('elements', []):
                        text = part.get('textRun', {}).get('content', '')
                        if current_index > section_start and text.strip().startswith('#'):
                            next_section_start = current_index
                            break
                        current_index += len(text)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            requests = []
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if next_section_start != -1:
                requests.append({
                    'deleteContentRange': {
                        'range': {
                            'startIndex': section_start + len(section_title) + 1,
                            'endIndex': next_section_start
                        }
                    }
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            requests.append({
                'insertText': {
                    'location': {
                        'index': section_start + len(section_title) + 1
                    },
                    'text': f"\n{new_content}\n"
                }
            })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
            result = self.service.documents().batchUpdate(
                documentId=self.knowledge_base_doc_id,
                body={'requests': requests}
            ).execute()
            
            logger.info(f"Successfully updated section {section_title}")
            return result
            
        except Exception as e:
            logger.error(f"Failed to update section: {e}")
            raise

    async def add_faq_item(self, question: str, answer: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª FAQ."""
        try:
            faq_content = await self.get_section_content("## 6. FAQ")
            new_faq_item = f"\n### –í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}\n"
            
            if not faq_content:
                new_content = new_faq_item
            else:
                new_content = faq_content + "\n" + new_faq_item
            
            await self.update_section("## 6. FAQ", new_content)
            logger.info(f"Successfully added new FAQ item: {question}")
            
        except Exception as e:
            logger.error(f"Failed to add FAQ item: {e}")
            raise

    async def update_metadata(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        try:
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            doc = self.service.documents().get(documentId=self.knowledge_base_doc_id).execute()
            faq_content = await self.get_section_content("## 6. FAQ")
            faq_count = faq_content.count("### –í–æ–ø—Ä–æ—Å:")
            
            metadata_content = f"""- –í–µ—Ä—Å–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: 1.0
- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {current_time}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FAQ: {faq_count}"""
            
            await self.update_section("## 9. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", metadata_content)
            logger.info("Successfully updated metadata")
            
        except Exception as e:
            logger.error(f"Failed to update metadata: {e}")
            raise
