import logging
from typing import Dict, Optional, Tuple
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from services.config_service import ConfigService
from services.postgres_service import PostgresService

logger = logging.getLogger(__name__)

class FeedbackService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.config = ConfigService()
        self.db = PostgresService()
        self.topics = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        await self._load_topics()

    async def _load_topics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º —Ñ–æ—Ä—É–º–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Telegram"""
        try:
            chat_id = await self.config.get_config_async('log_group_id', service='telegram')
            forum_topics = await self.bot.get_forum_topics(chat_id=chat_id)
            
            logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}")
            self.topics = {}
            
            for topic in forum_topics:
                self.topics[topic.name] = topic.message_thread_id
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–º–∞: {topic.name} (ID: {topic.message_thread_id})")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º —Ñ–æ—Ä—É–º–∞: {str(e)}", exc_info=True)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—ã –∏–∑ –±–∞–∑—ã
            query = "SELECT topic_id, name FROM forum_topics;"
            result = await self.db.fetch_all(query)
            self.topics = {row['name']: row['topic_id'] for row in result}
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ–º—ã –∏–∑ –±–∞–∑—ã: {self.topics}")

    async def add_feedback_buttons(self, chat_id: str, topic_id: Optional[int], message_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –ª–æ–≥–∞—Ö"""
        if not topic_id:
            logger.error("topic_id –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
            
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üëç", callback_data=f"like_{topic_id}_{message_id}"),
                InlineKeyboardButton("üëé", callback_data=f"dislike_{topic_id}_{message_id}")
            ]
        ])

        try:
            await self.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=keyboard
            )
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id} –≤ —Ç–µ–º–µ {topic_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {str(e)}")

    async def update_message_buttons(self, chat_id: str, message_id: int, topic_id: Optional[int], action: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è"""
        if not topic_id:
            logger.error("topic_id –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
            
        try:
            if action == "like":
                new_keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä", callback_data=f"liked_{topic_id}_{message_id}")
                ]])
            else:  # dislike
                new_keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"done_{topic_id}_{message_id}")
                ]])

            await self.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=new_keyboard
            )
            logger.info(f"–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {str(e)}")

    async def forward_message(self, chat_id: str, message_id: int, from_topic_id: int, to_topic_id: int, comment: str) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥—É—é —Ç–µ–º—É"""
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_msg = await self.bot.forward_message(
                chat_id=chat_id,
                from_chat_id=chat_id,
                message_id=message_id,
                message_thread_id=to_topic_id
            )
            
            if forwarded_msg:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —Ç–µ–º—ã {from_topic_id} –≤ —Ç–µ–º—É {to_topic_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=chat_id,
                    message_thread_id=to_topic_id,
                    text=comment,
                    parse_mode="Markdown"
                )
                logger.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω")
                return True
            
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    async def handle_like(self, chat_id: str, message_id: int, topic_id: Optional[int]) -> Tuple[bool, str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
            good_examples_topic = await self.get_topic_id('üéì –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞')
            if not good_examples_topic:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞ '–û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞'")
                return False, "–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_msg = await self.bot.forward_message(
                chat_id=chat_id,
                from_chat_id=chat_id,
                message_id=message_id,
                message_thread_id=good_examples_topic
            )
            
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ü–µ–Ω–µ–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ:\n"
                f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}\n"
                f"–ò–∑ —Ç–µ–º—ã: {topic_id}\n"
                f"–í —Ç–µ–º—É: –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞ (ID: {good_examples_topic})"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await self.bot.send_message(
                chat_id=chat_id,
                message_thread_id=good_examples_topic,
                reply_to_message_id=forwarded_msg.message_id,
                text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞"
            )
            
            return True, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É! üëç"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞: {str(e)}", exc_info=True)
            return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏"

    async def handle_dislike(self, chat_id: str, message_id: int, topic_id: Optional[int]) -> Tuple[bool, str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∑–ª–∞–π–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
            improvement_topic = await self.get_topic_id('üêõ –û—à–∏–±–∫–∏ –∏ –±–∞–≥–∏')
            if not improvement_topic:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞ '–û—à–∏–±–∫–∏ –∏ –±–∞–≥–∏'")
                return False, "–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_msg = await self.bot.forward_message(
                chat_id=chat_id,
                from_chat_id=chat_id,
                message_id=message_id,
                message_thread_id=improvement_topic
            )
            
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ü–µ–Ω–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ:\n"
                f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}\n"
                f"–ò–∑ —Ç–µ–º—ã: {topic_id}\n"
                f"–í —Ç–µ–º—É: –û—à–∏–±–∫–∏ –∏ –±–∞–≥–∏ (ID: {improvement_topic})"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await self.bot.send_message(
                chat_id=chat_id,
                message_thread_id=improvement_topic,
                reply_to_message_id=forwarded_msg.message_id,
                text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–µ–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
            )
            
            return True, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —É–ª—É—á—à–∏–º –æ—Ç–≤–µ—Ç—ã üëç"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∑–ª–∞–π–∫–∞: {str(e)}", exc_info=True)
            return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏"

    async def send_to_logs(self, message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É –ª–æ–≥–æ–≤"""
        log_topic_id = self.topics.get('üìù –õ–æ–≥–∏')
        if not log_topic_id:
            logger.error("ID —Ç–µ–º—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await self.send_message_with_buttons(log_topic_id, message)

    async def get_topic_id(self, topic_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–º—ã –ø–æ –µ—ë –∏–º–µ–Ω–∏"""
        try:
            if not self.topics:
                await self._load_topics()
            return self.topics.get(topic_name)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ç–µ–º—ã: {str(e)}")
            return None
