import requests
import logging
import time
from typing import Dict, List, Optional, Tuple

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class MessageReactionHandler:
    def __init__(self):
        self.bot_token = "5261424288:AAE2QYTnulLeyd6BdanhhzxLFnhAbXvBI7w"
        self.chat_id = "-1002349745989"
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.learning_topic_id = 145  # ID —Ç–µ–º—ã "–û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞"

    def get_message_info(self, message_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            response = requests.get(
                f"{self.base_url}/getMessage",
                params={
                    "chat_id": self.chat_id,
                    "message_id": message_id
                }
            )
            
            if response.status_code == 200:
                return response.json()["result"]
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {response.json()}")
                return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
            return None

    def forward_to_learning(self, message_id: int, from_topic_id: int) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            forward_response = requests.post(
                f"{self.base_url}/forwardMessage",
                json={
                    "chat_id": self.chat_id,
                    "from_chat_id": self.chat_id,
                    "message_id": message_id,
                    "message_thread_id": self.learning_topic_id
                }
            )
            
            if forward_response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
                comment_response = requests.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": self.chat_id,
                        "message_thread_id": self.learning_topic_id,
                        "text": f"‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –¥–∏–∑–ª–∞–π–∫ –≤ —Ç–µ–º–µ {from_topic_id}. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ.",
                        "parse_mode": "Markdown"
                    }
                )
                
                if comment_response.status_code == 200:
                    logger.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment_response.json()}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {forward_response.json()}")
            
            return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def process_message(self, message_id: int, topic_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –µ–≥–æ —Ä–µ–∞–∫—Ü–∏–∏"""
        message = self.get_message_info(message_id)
        if not message:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–∫—Ü–∏–π
        if "reactions" in message:
            reactions = message["reactions"]["reactions"]
            likes = sum(1 for r in reactions if r["type"] == "emoji" and r["emoji"] == "üëç")
            dislikes = sum(1 for r in reactions if r["type"] == "emoji" and r["emoji"] == "üëé")
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id}: üëç {likes}, üëé {dislikes}")
            
            if dislikes > likes:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ —Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è")
                self.forward_to_learning(message_id, topic_id)

    def get_chat_messages(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
        try:
            response = requests.get(
                f"{self.base_url}/getChat",
                params={
                    "chat_id": self.chat_id
                }
            )
            
            if response.status_code == 200:
                chat_info = response.json()["result"]
                logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ: {chat_info}")
                return chat_info
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {response.json()}")
                return []
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {str(e)}")
            return []

def main():
    handler = MessageReactionHandler()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat_info = handler.get_chat_messages()
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞")

    # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    messages_to_check = [
        # (message_id, topic_id)
        (162, 161),  # Telegram Support
        (164, 163),  # WhatsApp Support
        (165, 143),  # –õ–æ–≥–∏
        (166, 145),  # –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
        (167, 147),  # –û—à–∏–±–∫–∏ –∏ –±–∞–≥–∏
        (168, 149),  # Instagram Support
        (169, 161),  # Telegram Support
        (170, 163)   # WhatsApp Support
    ]
    
    for message_id, topic_id in messages_to_check:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —Ç–µ–º–µ {topic_id}")
        handler.process_message(message_id, topic_id)
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

if __name__ == "__main__":
    main()
