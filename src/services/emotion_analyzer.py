import logging
import re
from typing import Dict, List, Tuple

logger = logging.getLogger(__name__)

class EmotionAnalyzer:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
        self.emotions = {
            'positive': [
                '—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ',
                '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ', '‚ù§Ô∏è', 'üòä', 'üëç', '–Ω—Ä–∞–≤–∏—Ç—Å—è',
                '–¥–æ–≤–æ–ª–µ–Ω', '—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤'
            ],
            'negative': [
                '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ', '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω',
                '–∂–∞–ª—å', '–∂–∞–ª–∫–æ', '–≥—Ä—É—Å—Ç–Ω–æ', 'üòû', 'üëé', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–Ω–µ–Ω–∞–≤–∏–∂—É',
                '–æ—Ç—Å—Ç–æ–π', '—É–∂–∞—Å'
            ],
            'urgent': [
                '—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–µ–µ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '—Å–µ–π—á–∞—Å', '—Å–∫–æ—Ä–µ–µ', '—Å–ø–µ—à—É',
                '—É—Å–ø–µ—Ç—å', '—Å–µ–≥–æ–¥–Ω—è', '–∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ', '‚ö°Ô∏è'
            ],
            'confused': [
                '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', '–∫–∞–∫ —ç—Ç–æ', '—á—Ç–æ —ç—Ç–æ', '–∑–∞—á–µ–º',
                '–ø–æ—á–µ–º—É', 'ü§î', '—Å—Ç—Ä–∞–Ω–Ω–æ', '—Å–ª–æ–∂–Ω–æ'
            ]
        }
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–º–æ—Ü–∏–π
        self.weights = {
            'positive': 1.0,
            'negative': 1.2,  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–º —ç–º–æ—Ü–∏—è–º –ø—Ä–∏–¥–∞–µ–º –±–æ–ª—å—à–∏–π –≤–µ—Å
            'urgent': 1.5,    # –°—Ä–æ—á–Ω–æ—Å—Ç—å –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'confused': 0.8
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        self.intensity_patterns = {
            'high': [
                r'–æ—á–µ–Ω—å\s+\w+', r'–∫—Ä–∞–π–Ω–µ\s+\w+', r'—Å–∏–ª—å–Ω–æ\s+\w+',
                r'!!!+', r'–û–ß–ï–ù–¨', r'!!', r'–°–†–û–ß–ù–û'
            ],
            'low': [
                r'–Ω–µ–º–Ω–æ–≥–æ\s+\w+', r'—Å–ª–µ–≥–∫–∞\s+\w+', r'—á—É—Ç—å\s+\w+',
                r'–≤–æ–∑–º–æ–∂–Ω–æ', r'–Ω–∞–≤–µ—Ä–Ω–æ–µ', r'–º–æ–∂–µ—Ç –±—ã—Ç—å'
            ]
        }

    def _preprocess_text(self, text: str) -> str:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        return text.strip()

    def _check_intensity(self, text: str) -> float:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ."""
        intensity = 1.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        for pattern in self.intensity_patterns['high']:
            if re.search(pattern, text, re.IGNORECASE):
                intensity *= 1.5
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∏–∑–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        for pattern in self.intensity_patterns['low']:
            if re.search(pattern, text, re.IGNORECASE):
                intensity *= 0.7
                
        return min(intensity, 2.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å

    def _calculate_emotion_scores(self, text: str) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —ç–º–æ—Ü–∏–∏."""
        scores = {emotion: 0.0 for emotion in self.emotions.keys()}
        words = set(text.split())
        
        for emotion, keywords in self.emotions.items():
            for keyword in keywords:
                if keyword in text:
                    scores[emotion] += self.weights[emotion]
                    
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        intensity = self._check_intensity(text)
        for emotion in scores:
            scores[emotion] *= intensity
            
        return scores

    def _get_dominant_emotions(self, scores: Dict[str, float], threshold: float = 0.5) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —ç–º–æ—Ü–∏–∏."""
        max_score = max(scores.values()) if scores else 0
        if max_score == 0:
            return []
            
        return [
            emotion for emotion, score in scores.items()
            if score >= max_score * threshold
        ]

    async def analyze(self, text: str) -> Dict[str, any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é —Ç–µ–∫—Å—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–∞–º–∏ —ç–º–æ—Ü–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """
        try:
            processed_text = self._preprocess_text(text)
            scores = self._calculate_emotion_scores(processed_text)
            dominant_emotions = self._get_dominant_emotions(scores)
            
            response = {
                'emotion_scores': scores,
                'dominant_emotions': dominant_emotions,
                'intensity': self._check_intensity(processed_text),
                'recommendations': self._get_recommendations(dominant_emotions, scores)
            }
            
            logger.info(f"Emotion analysis results: {response}")
            return response
            
        except Exception as e:
            logger.error(f"Error in emotion analysis: {str(e)}")
            return {
                'emotion_scores': {},
                'dominant_emotions': [],
                'intensity': 1.0,
                'recommendations': []
            }

    def _get_recommendations(self, dominant_emotions: List[str], scores: Dict[str, float]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        recommendations = []
        
        if 'negative' in dominant_emotions:
            recommendations.append('–ü—Ä–æ—è–≤–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ —ç–º–ø–∞—Ç–∏—é')
            recommendations.append('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã')
            
        if 'urgent' in dominant_emotions:
            recommendations.append('–£—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞')
            recommendations.append('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å-–≤–∞—Ä–∏–∞–Ω—Ç—ã')
            
        if 'confused' in dominant_emotions:
            recommendations.append('–î–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ')
            recommendations.append('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏')
            
        if 'positive' in dominant_emotions:
            recommendations.append('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π')
            recommendations.append('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏')
            
        if not dominant_emotions:
            recommendations.append('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω')
            
        return recommendations
