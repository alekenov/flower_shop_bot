from flask import Flask, request, jsonify
import hmac
import hashlib
import json
import requests
import os

app = Flask(__name__)

VERIFY_TOKEN = 'f46a6797028932fea46fe712747c7c7b6f423cb44126c4682d4e08868710bab1'
APP_SECRET = '7c4df0e85dbbfb2cdd054a3fd59b9178'
PAGE_ACCESS_TOKEN = 'EAAW4km4ocGkBO7FI3X021kpiaJMbaeg5gtWby8gXZBitl98aCAJ6SKoYz0YJUBqeRhd0qNlRMwo1TT8SjA4ILLkoBuRjGjMedNeLaCfkKZAznzw2I8j8NCEK7vHrdbEgfsNGRwwCE04yT9QY7UDyJ6vZAJRSRyXttB2UfKSQ14yedfUIUo2GSYNmanXJt8PxA43SPqlOUZCQgZC55Hgc2l1Po'

@app.route('/webhook/instagram', methods=['GET'])
def verify_webhook():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Instagram Messaging"""
    mode = request.args.get('hub.mode')
    token = request.args.get('hub.verify_token')
    challenge = request.args.get('hub.challenge')
    
    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–µ–±—Ö—É–∫–∞:")
    print(f"mode: {mode}")
    print(f"token: {token}")
    print(f"challenge: {challenge}")
    
    if mode and token:
        if mode == 'subscribe' and token == VERIFY_TOKEN:
            print("‚úÖ –í–µ–±—Ö—É–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")
            return challenge
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
            return 'Forbidden', 403
    return 'Bad Request', 400

@app.route('/webhook/instagram', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    signature = request.headers.get('X-Hub-Signature-256', '')
    
    print("\n–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å:")
    print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
    print(f"–ü–æ–¥–ø–∏—Å—å: {signature}")
    
    if not verify_signature(request.data, signature):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏")
        return 'Invalid signature', 403
    
    data = request.json
    print("\n–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", json.dumps(data, indent=2, ensure_ascii=False))
    
    try:
        if data['object'] == 'instagram':
            for entry in data.get('entry', []):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                if 'messaging' in entry:
                    for messaging in entry['messaging']:
                        sender_id = messaging.get('sender', {}).get('id')
                        message = messaging.get('message', {}).get('text')
                        
                        if sender_id and message:
                            print(f"\n‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_id}: {message}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ-–æ—Ç–≤–µ—Ç
                            response = send_message(sender_id, f"–≠—Ö–æ: {message}")
                            print(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if 'changes' in entry:
                    for change in entry['changes']:
                        print(f"\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {json.dumps(change, indent=2, ensure_ascii=False)}")
        
        return 'OK', 200
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return 'Internal Server Error', 500

def verify_signature(payload, signature):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç Instagram"""
    if not signature:
        return False
    
    expected_signature = hmac.new(
        bytes(APP_SECRET, 'utf-8'),
        msg=payload,
        digestmod=hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(f"sha256={expected_signature}", signature)

def send_message(recipient_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = f"https://graph.facebook.com/v21.0/me/messages"
    
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text},
        "access_token": PAGE_ACCESS_TOKEN
    }
    
    try:
        response = requests.post(url, json=data)
        print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print(f"URL: {url}")
        print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            print(response.text)
        
        return response.json()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return None

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ Instagram...")
    app.run(host='0.0.0.0', port=5002, debug=True)
