import { TelegramClient } from './telegram.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.0';

interface CommandContext {
  chatId: number;
  text: string;
  telegram: TelegramClient;
  supabase: any; // —Ç–∏–ø –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω –ø–æ–∑–∂–µ
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart({ chatId, telegram }: CommandContext) {
  await telegram.sendMessage({
    chat_id: chatId,
    text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! üå∏\n\n' +
          '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ü–≤–µ—Ç—ã.\n\n' +
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          '/products - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n' +
          '/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å',
    parse_mode: 'HTML'
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /products
async function handleProducts({ chatId, telegram, supabase }: CommandContext) {
  try {
    const { data: products, error } = await supabase
      .from('products')
      .select('*')
      .order('name');

    if (error) throw error;

    if (!products || products.length === 0) {
      await telegram.sendMessage({
        chat_id: chatId,
        text: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.'
      });
      return;
    }

    let message = 'üå∫ –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥:\n\n';
    products.forEach((product: any) => {
      message += `${product.name}\n`;
      message += `–¶–µ–Ω–∞: ${product.price} —Ç–µ–Ω–≥–µ\n`;
      message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.quantity} —à—Ç.\n\n`;
    });

    await telegram.sendMessage({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('Error fetching products:', error);
    await telegram.sendMessage({
      chat_id: chatId,
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelp({ chatId, telegram }: CommandContext) {
  await telegram.sendMessage({
    chat_id: chatId,
    text: 'üå∏ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n' +
          '1. /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '2. /products - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤\n' +
          '3. /help - –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
          '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, –∫–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, ' +
          '–∏ —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.',
    parse_mode: 'HTML'
  });
}

// –ö–∞—Ä—Ç–∞ –∫–æ–º–∞–Ω–¥
const commands: Record<string, (context: CommandContext) => Promise<void>> = {
  '/start': handleStart,
  '/products': handleProducts,
  '/help': handleHelp,
};

export async function handleCommand(command: string, context: CommandContext): Promise<void> {
  const handler = commands[command.toLowerCase()];
  if (handler) {
    await handler(context);
  } else {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    await context.telegram.sendMessage({
      chat_id: context.chatId,
      text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
    });
  }
}
