#!/usr/bin/env python3
import os
import sys
import json
import tempfile
import subprocess
from pathlib import Path
from psycopg2.extras import DictCursor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))

from src.services.config_service import config_service

def run_command(command, **kwargs):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            text=True,
            capture_output=True,
            **kwargs
        )
        print(f"‚úì {result.stdout.strip()}")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error: {e.stderr}")
        raise

def setup_gcloud():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud CLI"""
    try:
        print("\nüîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud CLI...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–∞–±–ª–∏—Ü—ã credentials
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã credentials...")
        with config_service.conn.cursor(cursor_factory=DictCursor) as cur:
            cur.execute(
                """
                SELECT credential_value
                FROM credentials
                WHERE service_name = 'google'
                AND credential_key = 'flower_shop_bot_service_account'
                """
            )
            result = cur.fetchone()
            if not result:
                raise ValueError("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á Google –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ credentials")
            service_key = result['credential_value']
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–ª—é—á–∞
        print("\n2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as temp:
            json.dump(json.loads(service_key), temp)
            key_path = temp.name
            
        try:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            print("\n3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            run_command(f"gcloud auth activate-service-account --key-file={key_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º project_id –∏–∑ –∫–ª—é—á–∞
            key_data = json.loads(service_key)
            project_id = key_data.get('project_id')
            if not project_id:
                raise ValueError("project_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–º –∫–ª—é—á–µ")
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            print(f"\n4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}...")
            run_command(f"gcloud config set project {project_id}")
            
            # –í–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API
            print("\n5Ô∏è‚É£ –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API...")
            apis = [
                "cloudbuild.googleapis.com",
                "run.googleapis.com",
                "containerregistry.googleapis.com"
            ]
            for api in apis:
                print(f"\n–í–∫–ª—é—á–µ–Ω–∏–µ {api}...")
                run_command(f"gcloud services enable {api}")
                
            print("\n‚ú® Google Cloud CLI —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            os.unlink(key_path)
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    setup_gcloud()
